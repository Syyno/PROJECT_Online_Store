// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyProjectOnlineShop.Data;

namespace MyProjectOnlineShop.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20201022170508_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "014050AE-8FAA-4EA6-A0A4-DF7385C578E2",
                            ConcurrencyStamp = "860027ce-1113-4023-8430-29ec4b14c4b5",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "0DEC5C45-E146-4562-883A-2499CB6A7F27",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48bce2b3-0e79-4056-8268-cf1792171a5c",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEJFzJSnbwMqipQqdZAmbXin8c0AY2oCJHyoAs4KXhx16JLRIPmjxGccaaRyduOy5tw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "0DEC5C45-E146-4562-883A-2499CB6A7F27",
                            RoleId = "014050AE-8FAA-4EA6-A0A4-DF7385C578E2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MyProjectOnlineShop.Data.Entities.AdditionalPicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductBaseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductBaseId");

                    b.ToTable("AdditionalPicture");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3639063a-f789-44dc-8bf4-2eb56d0d2add"),
                            AdditionalImgPath = "pro-big-2.jpg",
                            ProductBaseId = new Guid("7336cbb0-8170-48fb-bb6b-ea7ef1d1a87c")
                        },
                        new
                        {
                            Id = new Guid("54358209-48b1-4fb7-b492-a8d748ce0c65"),
                            AdditionalImgPath = "pro-big-3.jpg",
                            ProductBaseId = new Guid("7336cbb0-8170-48fb-bb6b-ea7ef1d1a87c")
                        },
                        new
                        {
                            Id = new Guid("55f4802f-b016-465a-a890-cdc37a7bf5d5"),
                            AdditionalImgPath = "pro-big-1.jpg",
                            ProductBaseId = new Guid("20b98ce5-fc42-44ee-805f-26e35a51b056")
                        },
                        new
                        {
                            Id = new Guid("1b7f7d60-db80-49e6-8689-1686929c9671"),
                            AdditionalImgPath = "pro-big-3.jpg",
                            ProductBaseId = new Guid("20b98ce5-fc42-44ee-805f-26e35a51b056")
                        },
                        new
                        {
                            Id = new Guid("428b6d63-4957-4acd-8d20-d8f5effebc82"),
                            AdditionalImgPath = "pro-big-1.jpg",
                            ProductBaseId = new Guid("2610d2d4-e4d7-417f-84df-ca3d4752f981")
                        },
                        new
                        {
                            Id = new Guid("b931c7c4-d16f-4bd0-a727-24660b0a41a4"),
                            AdditionalImgPath = "pro-big-2.jpg",
                            ProductBaseId = new Guid("2610d2d4-e4d7-417f-84df-ca3d4752f981")
                        },
                        new
                        {
                            Id = new Guid("84a9b1d0-8088-4f16-857a-fc132edeafd1"),
                            AdditionalImgPath = "4.jpg",
                            ProductBaseId = new Guid("7be540cb-3e09-4ab2-b6e3-50217ff52cf1")
                        },
                        new
                        {
                            Id = new Guid("1230d89a-8452-4101-8167-c43f5471ed87"),
                            AdditionalImgPath = "3.jpg",
                            ProductBaseId = new Guid("7be540cb-3e09-4ab2-b6e3-50217ff52cf1")
                        },
                        new
                        {
                            Id = new Guid("20664de3-ddc6-414d-b0a3-076d0724072a"),
                            AdditionalImgPath = "pro-big-1.jpg",
                            ProductBaseId = new Guid("f3a7412c-c5e5-4822-a60d-155e1dd060e0")
                        },
                        new
                        {
                            Id = new Guid("dccfed5d-dfda-4fa3-a66c-d00f0d2f3f0c"),
                            AdditionalImgPath = "pro-big-3.jpg",
                            ProductBaseId = new Guid("f3a7412c-c5e5-4822-a60d-155e1dd060e0")
                        },
                        new
                        {
                            Id = new Guid("efd2cc92-b8c5-4f54-b0db-696d7273c5ca"),
                            AdditionalImgPath = "pro-big-4.jpg",
                            ProductBaseId = new Guid("e4266357-fd88-4f35-bfae-8ce79a3c7dfa")
                        },
                        new
                        {
                            Id = new Guid("f240f84c-9f87-466e-a733-af6e0a4b42b7"),
                            AdditionalImgPath = "pro-big-2.jpg",
                            ProductBaseId = new Guid("e4266357-fd88-4f35-bfae-8ce79a3c7dfa")
                        });
                });

            modelBuilder.Entity("MyProjectOnlineShop.Data.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("MyProjectOnlineShop.Data.Entities.CustomerCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductBaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("CustomerCart");
                });

            modelBuilder.Entity("MyProjectOnlineShop.Data.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Sum")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("MyProjectOnlineShop.Data.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionFull")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("ImgPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7336cbb0-8170-48fb-bb6b-ea7ef1d1a87c"),
                            DescriptionFull = "White modern chair",
                            ImgPath = "1.jpg",
                            Name = "Modern chair",
                            Price = 200m,
                            Quantity = 10
                        },
                        new
                        {
                            Id = new Guid("20b98ce5-fc42-44ee-805f-26e35a51b056"),
                            DescriptionFull = "Plant pot for your favorite plants",
                            ImgPath = "5.jpg",
                            Name = "Plant pot",
                            Price = 25m,
                            Quantity = 18
                        },
                        new
                        {
                            Id = new Guid("2610d2d4-e4d7-417f-84df-ca3d4752f981"),
                            DescriptionFull = "Chair for minimalists",
                            ImgPath = "7.jpg",
                            Name = "Backless chair",
                            Price = 225m,
                            Quantity = 7
                        },
                        new
                        {
                            Id = new Guid("7be540cb-3e09-4ab2-b6e3-50217ff52cf1"),
                            DescriptionFull = "White modern table",
                            ImgPath = "product4.jpg",
                            Name = "Modern table",
                            Price = 330m,
                            Quantity = 11
                        },
                        new
                        {
                            Id = new Guid("f3a7412c-c5e5-4822-a60d-155e1dd060e0"),
                            DescriptionFull = "Extra comfortable chair",
                            ImgPath = "8.jpg",
                            Name = "Rocking chair",
                            Price = 290m,
                            Quantity = 6
                        },
                        new
                        {
                            Id = new Guid("e4266357-fd88-4f35-bfae-8ce79a3c7dfa"),
                            DescriptionFull = "Let there be light",
                            ImgPath = "product6.jpg",
                            Name = "Hanging lamp",
                            Price = 50m,
                            Quantity = 22
                        });
                });

            modelBuilder.Entity("MyProjectOnlineShop.Data.Entities.ProductReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductBaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductBaseId");

                    b.ToTable("ProductReview");
                });

            modelBuilder.Entity("MyProjectOnlineShop.Services.ProductRatings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductBaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<int?>("RatingTotal")
                        .HasColumnType("int");

                    b.Property<int?>("VotesCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductBaseId")
                        .IsUnique();

                    b.ToTable("ProductRatings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyProjectOnlineShop.Data.Entities.AdditionalPicture", b =>
                {
                    b.HasOne("MyProjectOnlineShop.Data.Entities.Product", "ProductBase")
                        .WithMany("AdditionalPictures")
                        .HasForeignKey("ProductBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyProjectOnlineShop.Data.Entities.Customer", b =>
                {
                    b.HasOne("MyProjectOnlineShop.Data.Entities.Order", "Order")
                        .WithOne("Customer")
                        .HasForeignKey("MyProjectOnlineShop.Data.Entities.Customer", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyProjectOnlineShop.Data.Entities.CustomerCart", b =>
                {
                    b.HasOne("MyProjectOnlineShop.Data.Entities.Order", "Order")
                        .WithMany("CustomerCart")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyProjectOnlineShop.Data.Entities.ProductReview", b =>
                {
                    b.HasOne("MyProjectOnlineShop.Data.Entities.Product", "ProductBase")
                        .WithMany("ProductReview")
                        .HasForeignKey("ProductBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyProjectOnlineShop.Services.ProductRatings", b =>
                {
                    b.HasOne("MyProjectOnlineShop.Data.Entities.Product", "ProductBase")
                        .WithOne("ProductRatings")
                        .HasForeignKey("MyProjectOnlineShop.Services.ProductRatings", "ProductBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
